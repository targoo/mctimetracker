<?php
/**
 * @file
 * Module file for block_example.
 */

/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 */
function mc_custom_block_block_info() {
  // This hook returns an array, each component of which is an array of block
  // information. The array keys are the 'delta' values used in other block
  // hooks.

  // The required block information is a block description, which is shown
  // to the site administrator in the list of possible blocks. You can also
  // provide initial settings for block weight, status, etc.

  // Many options are defined in hook_block_info():
  $blocks['credit'] = array(
    // info: The name of the block.
    'info' => t('Remaining Credit'),
    // Block caching options (per role, per user, etc.)
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['agenda'] = array(
    // info: The name of the block.
    'info' => t('Agenda'),
    // Block caching options (per role, per user, etc.)
    'cache' => DRUPAL_NO_CACHE,
  );
  
  return $blocks;
}

/**
 * Implements hook_block_configure().
 *
 * This hook declares configuration options for blocks provided by this module.
 */
function mc_custom_block_block_configure($delta = '') {
  // The $delta parameter tells us which block is being configured.
  // In this example, we'll allow the administrator to customize
  // the text of the 'configurable text string' block defined in this module.

  $form = array();
  if ($delta == 'todo') {
    // All we need to provide is the specific configuration options for our
    // block. Drupal will take care of the standard block configuration options
    // (block title, page visibility, etc.) and the save button.
    $form['mc_custom_block_string'] = array(
      '#type' => 'textfield',
      '#title' => t('Block contents'),
      '#size' => 60,
      '#description' => t('This text will appear in the example block.'),
      '#default_value' => variable_get('mc_custom_block_string',  t('Some example content.')),
    );
  }
  return $form;
}

/**
 * Implements hook_block_save().
 *
 * This hook declares how the configured options for a block
 * provided by this module are saved.
 */
function mc_custom_block_block_save($delta = '', $edit = array()) {
  // We need to save settings from the configuration form.
  // We need to check $delta to make sure we are saving the right block.
  if ($delta == 'credit') {
    // Have Drupal save the string to the database.
    variable_set('mc_custom_block_string', $edit['mc_custom_block_string']);
  }
  return;
}

/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.
 */
function mc_custom_block_block_view($delta = '') {
  $block = array();	
  //The $delta parameter tells us which block is being requested.
  switch ($delta) {
    case 'credit':
      // The subject is displayed at the top of the block. Note that it
      // should be passed through t() for translation. The title configured
      // for the block using Drupal UI supercedes this one.
      $block['subject'] = '';
      // The content of the block is typically generated by calling a custom
      // function.
      $block['content'] = mc_custom_block_contents($delta);
      break;
  	case 'agenda':
      // The subject is displayed at the top of the block. Note that it
      // should be passed through t() for translation. The title configured
      // for the block using Drupal UI supercedes this one.
      $block['subject'] = '';
      // The content of the block is typically generated by calling a custom
      // function.
      $block['content'] = mc_custom_block_contents($delta);
      break;
  }
  return $block;
}

/**
 * A module-defined block content function.
 */
function mc_custom_block_contents($which_block) {
  switch ($which_block) {
  	
    case 'credit':
    	
      // Domain
      $domain = domain_get_domain();
      
      // Roles
      global $user;
      $roles = $user->roles;
      //dpm($roles);
      
      $link = '<a class="upgrade-balance-button TextCopy" href="/user/me/edit"><span>Activate</span></a>';
	  if (isset($roles[4])){
	  	$link = '<a class="upgrade-balance-button TextCopy" href="/account/billing/upgrade"><span>Add Credit</span></a>';
	  }
	  if (isset($roles[6])){
	  	$link = '<a class="upgrade-balance-button TextCopy" href="/account/billing/upgrade"><span>Upgrade</span></a>';
	  }
	  
	  $billing = '/user/me/edit';
	  
	  // Credit      
      $credit = db_query("SELECT SUM(amount) FROM {mc_campaign_credits} WHERE did = :did AND deleted = 0",array(':did'=>$domain['domain_id']))->fetchField();
      $credit = ($credit) ? $credit : ';-('; 
    	
      return array('#markup' => '
      
      <div id="balance-badge-trial">
		 <div id="balance-display">
				<span class="currency-symbol TextCopy">Credits</span>
				<p class="balance-amount"><a href="'.$billing.'">' . $credit . '</a></p>
			</div>
		    ' . $link . '
	  </div>
		
      ');
      
    case 'agenda':
    	
  	  $build['dashboard']['#attached']['js'][] = array('data' => '(function($){$(function() { 
  	  console.log("ddd");
  	  $( "#small_calendar").datepicker();
      })})(jQuery);', 'type' => 'inline');
    	
      /*$(function() {
		$( "#datepicker" ).datepicker();
	  });*/	
       
  	  $build['dashboard']['#markup'] =  '<div id="create_calendar"><a href="/node/add/event">Create</a></div>';
  	  $build['dashboard']['#markup'] .=  '<div id="small_calendar"></div>';
  	  $build['dashboard']['#markup'] .=  '<div id="my_calendar">My calendars</div>';
  	  $build['dashboard']['#markup'] .=  '<div id="other_calendar">Other calendars</div>';
  	  
      return $build;
  	
  }
}

/*
 * The following hooks can be used to alter blocks
 * provided by your own or other modules.
 */

/**
 * Implements hook_block_list_alter().
 *
 * This hook allows you to add, remove or modify blocks in the block list. The
 * block list contains the block definitions. This example requires
 * search module and the search block enabled
 * to see how this hook implementation works.
 *
 * You may also be interested in hook_block_info_alter(), which allows changes
 * to the behavior of blocks.
 */
function mc_custom_block_block_list_alter(&$blocks) {
  // We are going to make the search block sticky on bottom of regions. For
  // this example, we will modify the block list and append the search block at
  // the end of the list, so even if the administrator configures the block to
  // be on the top of the region, it will demote to bottom again.
  foreach ($blocks as $bid => $block) {
    if (($block->module == 'search') && ($block->delta == 'form')) {
      // Remove the block from the list and append to the end.
      unset($blocks[$bid]);
      $blocks[$bid] = $block;
      break;
    }
  }
}

/**
 * Implements hook_block_view_alter().
 *
 * This hook allows you to modify the output of any block in the system.
 *
 * In addition, instead of hook_block_view_alter(), which is called for all
 * blocks, you can also use hook_block_view_MODULE_DELTA_alter() to alter a
 * specific block.
 *
 * We are going to uppercase the title of any block if the string "magic string"
 * is encountered in the content. If we were changing only our block using
 * hook_block_view_MODULE_DELTA_alter to do this, we would have used the
 * function:
 * mc_custom_block_block_view_mc_custom_block_credit_alter()
 *
 * To demonstrate the effect of this hook, you can use the
 * 'configurable_text_string' block created by this module and add the
 * text 'magic string' into the configuration.
 */
function mc_custom_block_block_view_alter(&$data, $block) {
  // Verify the we have raw text content
  if (!isset($data['content']) || !is_string($data['content'])) {
    return;
  }

  // If the content contains the string: 'magic string', uppercase the title.
  if (strstr($data['content'], 'magic string')) {
    $data['subject'] = isset($data['subject']) ? drupal_strtoupper($data['subject']) : '';
  }
}
/**
 * @} End of "defgroup mc_custom_block".
 */
