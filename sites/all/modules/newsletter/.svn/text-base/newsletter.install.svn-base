<?php
/**
 * @file
 * Contains install,uninstall and update functions for Newsletter module.
 */

/**
 * Implements hook_install().
 */
function newsletter_install() {
  $mail_modes = variable_get('mail_system', array('default-system' => 'DefaultMailSystem'));
  $mail_modes['newsletter'] = 'NewsletterMailSystem';
  variable_set('mail_system', $mail_modes);
  $personal_info_form_defaults = array(
    'firstname' => array('show' => TRUE, 'require' => NULL),
    'lastname' => array('show' => TRUE, 'require' => NULL),
    'gender' => array('show' => TRUE, 'require' => NULL),
    'age_group' => array('show' => TRUE, 'require' => NULL),
    'job' => array('show' => TRUE, 'require' => NULL),
    'country' => array('show' => TRUE, 'require' => NULL),
    'city' => array('show' => TRUE, 'require' => NULL),
    'receive_format' => array('show' => TRUE, 'require' => NULL),
    'language' => array('show' => NULL, 'require' => NULL),
  );
  variable_set('newsletter_personal_info_form', $personal_info_form_defaults);
  variable_set('newsletter_send_confirm', TRUE);
  variable_set('newsletter_send_welcome', TRUE);
  variable_set('newsletter_send_unsubscribe', TRUE);

  $confirmation_body = "Hello [newsletter:subscriber_email],<br />\n\n";
  $confirmation_body .= "We received your request for information from [site:name] <br />\n";
  $confirmation_body .= "Before we begin sending you the information you requested, we want to be certain we have your permission.<br />\n";
  $confirmation_body .= "Click the link below to give us permission to send you information. It's fast and easy!  If you cannot click the full URL below, please copy the URL and paste it into your web browser.<br /><br />\n\n";
  $confirmation_body .= "Confirm by clicking the URL below:<br /><br />\n";
  $confirmation_body .= "<a href=\"[newsletter:confirmation_url]\">[newsletter:confirmation_url]</a><br /><br />\n\n";
  $confirmation_body .= "If you do not want to subscribe, simply ignore this message.<br /><br />\n\n";
  $confirmation_body .= "Best Regards,<br />\n";
  $confirmation_body .= "[site:name]<br />\n";
  $confirmation_body .= "[site:url]<br /><br />\n\n";
  $confirmation_body .= "Request generated by:<br />\n";
  $confirmation_body .= "IP: [newsletter:subscription_ip]<br />\n";
  $confirmation_body .= "Date: [newsletter:subscription_time]<br />\n";

  db_insert('newsletter_templates')
  ->fields(array(
    'subject' => 'Newsletter Confirmation',
    'body' => $confirmation_body,
    'format' => 'filtered_html',
    'basic' => 1,
    'created' => REQUEST_TIME,
  ))
  ->execute();

  $welcome_body = "Hello [newsletter:subscriber_email],<br /><br />\n\n";
  $welcome_body .= "Thank you for your subscription. You are now signed up to our newsletter!<br />\n";
  $welcome_body .= "We will keep your personal information private and secure. We will not share your email address with any third parties. <br />\n";
  $welcome_body .= "To ensure you receive future subscribers-only news, please add this e-mail to your e-mail address book or safe senders list.<br />
\n\n";
  $welcome_body .= "Sincerely,<br />\n";
  $welcome_body .= "[site:name]<br />\n";
  $welcome_body .= "[site:url]<br /><br />\n\n";
  $welcome_body .= "----<br />\n";
  $welcome_body .= "You are receiving this email because on [newsletter:subscription_time] at [site:url] you subscribed to receive our e-newsletters.<br /><br />\n";
  $welcome_body .= "You can unsubscribe via the link below:<br />\n";
  $welcome_body .= "<a href=\"[newsletter:unsubscribe_url]\">Unsubscribe</a>\n";

  db_insert('newsletter_templates')
  ->fields(array(
    'subject' => 'Newsletter Welcome',
    'body' => $welcome_body,
    'format' => 'filtered_html',
    'basic' => 1,
    'created' => REQUEST_TIME,
  ))
  ->execute();

  $unsubscribe_body = "Dear [newsletter:subscriber_email],<br />\n\n";
  $unsubscribe_body .= "This email is being sent to notify you that we have received a request to remove the following record from our mailing list:<br /><br />\n\n";
  $unsubscribe_body .= "Email: [newsletter:subscriber_email]<br /><br />\n\n";
  $unsubscribe_body .= "This record was removed from our database.<br />\n";
  $unsubscribe_body .= "If you do receive further unwanted email from our system, please let us know and we'd be happy to address the issue immediately.<br /><br />\n\n";
  $unsubscribe_body .= "Sincerely,<br />\n";
  $unsubscribe_body .= "[site:name]<br />\n";
  $unsubscribe_body .= "[site:url] <br />\n";

  db_insert('newsletter_templates')
  ->fields(array(
    'subject' => 'Newsletter Unsubscribe',
    'body' => $unsubscribe_body,
    'format' => 'filtered_html',
    'basic' => 1,
    'created' => REQUEST_TIME,
  ))
  ->execute();

  $body = "Hello [newsletter:subscriber_email],<br /><br />\n\n";
  $body .= "Here is what's new on <a href=\"[site:url]\">[site:name]</a> over the past few days. Your comments and feedback are always welcome.<br />\n\n";
  $body .= "<ol>\n";
  $body .= " [repeat] \n";
  $body .= "<li><a href=\"[node:url]\">[node:title]</a> -[node:created]<br /> [node:summary]<br /></li>\n";
  $body .= " [/repeat] \n\n";
  $body .= "</ol>Sincerely,<br /> <a href=\"[site:url]\">[site:name]</a><br /> <br /> <br />\n\n";
  $body .= "--<br />You are receiving this email because on [newsletter:subscription_time] you subscribed to receive our newsletter list : [newsletter:list_name].<br /><br />\n\n";
  $body .= "You can unsubscribe by clicking the link below:<br /> \n";
  $body .= "<a href=\"[newsletter:unsubscribe_url]\">Unsubscribe</a><br />\n";

  db_insert('newsletter_templates')
  ->fields(array(
    'subject' => 'default',
    'body' => $body,
    'format' => 'filtered_html',
    'created' => REQUEST_TIME,
  ))
  ->execute();
}

/**
 * Implements hook_uninstall().
 */
function newsletter_uninstall() {
  variable_del('newsletter_from');
  variable_del('newsletter_format');
  variable_del('newsletter_track_open_rate');
  variable_del('newsletter_cron_number');
  variable_del('newsletter_send_confirm');
  variable_del('newsletter_send_welcome');
  variable_del('newsletter_send_unsubscribe');
  variable_del('newsletter_for_next_cron');
  variable_del('newsletter_custom_for_next_cron');
  variable_del('newsletter_personal_info_form');
  variable_del('newsletter_show_email');
  variable_del('newsletter_show_email_in_block');
  variable_del('newsletter_always_show_subscribe_block');
  variable_del('newsletter_custom_drafts');

  $mail_modes = variable_get('mail_system');
  unset($mail_modes['newsletter']);
  variable_set('mail_system', $mail_modes);
}

/**
 * Implements hook_schema().
 */
function newsletter_schema() {
  $schema = array();
  $schema['newsletter_subscribers'] = array(
    'description' => 'Contains the subscriber emails with their list relations.',
    'fields' => array(
      'id' => array(
        'description' => 'The primary identifier for a subscriber.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'The user id (if the user is registered) of the subscriber.',
        'type' => 'int',
        'not null' => FALSE,
        'default' => NULL,
      ),
      'email' => array(
        'description' => 'The subscriber\'s email.',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
      ),
      'firstname' => array(
        'description' => 'The subscriber\'s full name.',
        'type' => 'varchar',
        'length' => 64,
        'not null' => FALSE,
      ),
      'lastname' => array(
        'description' => 'The subscriber\'s full name.',
        'type' => 'varchar',
        'length' => 64,
        'not null' => FALSE,
      ),
      'age_group' => array(
        'description' => 'The subscriber\'s age group.',
        'type' => 'varchar',
        'length' => 11,
        'not null' => FALSE,
      ),
      'job' => array(
        'description' => 'The subscriber\'s job.',
        'type' => 'varchar',
        'length' => 64,
        'not null' => FALSE,
      ),
      'country' => array(
        'description' => 'The subscriber\'s country.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'city' => array(
        'description' => 'The subscriber\'s city.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'gender' => array(
        'description' => 'The subscriber\'s gender.',
        'type' => 'varchar',
        'length' => 24,
        'not null' => FALSE,
      ),
      'receive_format' => array(
        'description' => 'The subscriber\'s Preferred newsletter format.',
        'type' => 'varchar',
        'length' => 11,
        'not null' => FALSE,
      ),
      'language' => array(
        'description' => 'The subscriber\'s newsletter language code.',
        'type' => 'varchar',
        'length' => 11,
        'not null' => FALSE,
      ),
      'ip' => array(
        'description' => 'Subscriber\'s IP, when he/she subscribed.',
        'type' => 'varchar',
        'length' => 22,
        'not null' => FALSE,
      ),
      'hash' => array(
        'description' => 'Subscriber\'s hash, used to confirm subscription and unsubscribe.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
      ),
      'confirmed' => array(
        'description' => 'Whether this user has confirm his subscription through email.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'confirmation_timestamp' => array(
        'description' => 'The confirmation timestamp of this subscriber.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'created' => array(
        'description' => 'The creation timestamp of this subscriber.',
        'type' => 'int',
        'not null' => FALSE,
        'default' => 0,
      ),
    ),
    'indexes' => array(
      'subscriber_created' => array('created'),
    ),
    'unique keys' => array(
      'subscriber_email' => array('email'),
      'subscriber_uid' => array('uid'),
    ),
    'primary key' => array('id'),
  );
  $schema['newsletter_lists'] = array(
    'description' => 'Contains the newsletter subscriber lists with their templates relations.',
    'fields' => array(
      'id' => array(
        'description' => 'The unique ID of this list.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
     'title' => array(
        'description' => 'The list\'s title .',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'send_rate' => array(
        'description' => 'How often to send this list.Manual,Daily,Weekly or Monthly.',
        'type' => 'varchar',
        'length' => 11,
        'not null' => TRUE,
        'default' => 'Manual',
      ),
      'template_id' => array(
        'description' => 'The {newsletter_templates}.id this list uses.',
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
       'last_sent' => array(
        'description' => 'Timestamp this list was last sent.',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'send_again' => array(
        'description' => 'Date this list needs to be sent again.',
        'mysql_type' => 'date',
        'pgsql_type' => 'timestamp',
        'not null' => FALSE,
      ),
      'created' => array(
        'description' => 'The creation timestamp of this subscriber.',
        'type' => 'int',
        'not null' => FALSE,
        'default' => 0,
      ),
    ),
    'unique keys' => array(
      'list_title'     => array('title'),
    ),
    'foreign keys' => array(
      'tracked_template' => array(
        'table' => 'newsletter_templates',
        'columns' => array('template_id' => 'id'),
      ),
    ),
    'indexes' => array(
      'list_created'  => array('created'),
    ),
    'primary key' => array('id'),
  );
  $schema['newsletter_templates'] = array(
    'description' => 'Contains the newsletter templates.',
    'fields' => array(
      'id' => array(
        'description' => 'The unique ID of this template.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
     'subject' => array(
        'description' => 'The template\'s title/subject .',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'body' => array(
        'description' => 'The template body,containing the replacement patterns.',
        'type' => 'text',
        'not null' => TRUE,
      ),
      'format' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => 'plain_text',
      ),
      'basic' => array(
        'description' => 'Whether this template is basic or not.',
        'type' => 'int',
        'not null' => FALSE,
        'default' => 0,
      ),
      'exposed' => array(
        'description' => 'Boolean.whether this list is exposed or not',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'created' => array(
        'description' => 'The creation timestamp of this template.',
        'type' => 'int',
        'not null' => FALSE,
        'default' => 0,
      ),
    ),
    'unique keys' => array(
      'template_subject'     => array('subject'),
    ),
    'indexes' => array(
      'template_created'  => array('created'),
    ),
    'primary key' => array('id'),
  );
  $schema['newsletter_index'] = array(
    'description' => 'Maintains denormalized information about newsletter lists/terms relationships.',
    'fields' => array(
      'template_id' => array(
        'description' => 'The {newsletter_templates}.id this record tracks.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'tid' => array(
         'description' => 'The term ID.',
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0,
      ),
      'created' => array(
        'description' => 'The creation timestamp of this relation.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array(
      'term_node' => array('tid', 'created'),
      'template_id' => array('template_id'),
    ),
    'foreign keys' => array(
      'tracked_template' => array(
        'table' => 'newsletter_templates',
        'columns' => array('template_id' => 'id'),
      ),
      'term' => array(
        'table' => 'taxonomy_term_data',
        'columns' => array('tid' => 'tid'),
      ),
    ),
  );
  $schema['newsletter_index_subscribers'] = array(
    'description' => 'Maintains denormalized information about newsletter subscriber/lists relationships.',
    'fields' => array(
      'subscriber_id' => array(
        'description' => 'The {newsletter_subscribers}.id of this relation.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'list_id' => array(
        'description' => 'The {newsletter_lists}.id of this relation.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'tid_subscribed' => array(
         'description' => 'The serialized terms this subscriber selected(only if list is exposed, else NULL).',
         'type' => 'text',
         'not null' => FALSE,
         'default' => NULL,
      ),
      'created' => array(
        'description' => 'The creation timestamp of this relation.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array(
      'subscriber_id' => array('subscriber_id'),
    ),
    'foreign keys' => array(
      'tracked_list' => array(
        'table' => 'newsletter_lists',
        'columns' => array('list_id' => 'id'),
      ),
      'tracked_subscriber' => array(
        'table' => 'newsletter_subscribers',
        'columns' => array('subscriber_id' => 'id'),
      ),
    ),
  );
  $schema['newsletter_newsletters'] = array(
    'description' => 'Contains the newsletters that are sent with their statistics.',
    'fields' => array(
      'id' => array(
        'description' => 'The primary identifier for a newsletter.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'title' => array(
        'description' => 'The newsletter\'s title.(If this newsletter is automatic then it gets its list title)',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'send_id' => array(
        'description' => 'The # of sent times.',
        'type' => 'int',
        'not null' => FALSE,
        'default' => 0,
      ),
      'custom' => array(
        'description' => 'Whether this newsletter sent as a custom one.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'template_id' => array(
        'description' => 'The {newsletter_templates}.id this newsletter uses.',
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
      'subscribers_sent' => array(
        'description' => 'No Of subscribers this newsletter sent to.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => 0,
      ),
      'clicks' => array(
        'description' => 'how many clicks this newsletter/list generated for the website.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'opens' => array(
        'description' => 'how many times this newsletter/list opened by subscriber.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'last_sent' => array(
        'description' => 'The last sent timestamp of this newsletter.',
        'type' => 'int',
        'not null' => FALSE,
        'default' => 0,
      ),
    ),
    'foreign keys' => array(
      'tracked_template' => array(
        'table' => 'newsletter_templates',
        'columns' => array('template_id' => 'id'),
      ),
    ),
    'indexes' => array(
      'newsletter_send_id'  => array('send_id'),
      'newsletter_last_sent'  => array('last_sent'),
    ),
    'primary key' => array('id'),
  );
  return $schema;
}
