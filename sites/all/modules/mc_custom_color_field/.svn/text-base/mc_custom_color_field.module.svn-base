<?php
/**
 * @file
 * An color field with a custom color picker using the Field Types API.
 */

/***************************************************************
 * Field Type API hooks
 ***************************************************************/

/**
 * Implements hook_field_info().
 *
 * Provides the description of the field.
 */
function mc_custom_color_field_field_info() {
  return array(
    // We name our field as the associative name of the array.
    'mc_custom_color_field_rgb' => array(
      'label' => t('CCK Color Picker'),
      'description' => t('Field composed of an RGB color.'),
      'default_widget' => 'cck_colorpicker_default_widget',
      'default_formatter' => 'cck_colorpicker_default_formatter',
    ),
  );
}

/**
 * Implements hook_field_validate().
 *
 * This hook gives us a chance to validate content that's in our
 * field. We're really only interested in the $items parameter, since
 * it holds arrays representing content in the field we've defined.
 * We want to verify that the items only contain RGB hex values like
 * this: #RRGGBB. If the item validates, we do nothing. If it doesn't
 * validate, we add our own error notification to the $errors parameter.
 *
 * @see mc_custom_color_field_widget_error()
 */
function mc_custom_color_field_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    if (!empty($item['rgb'])) {
      if (! preg_match('@^#[0-9a-fA-F]{6}$@', $item['rgb'])) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'mc_custom_color_field_invalid',
          'message' => t('Color must be in the HTML format #abcdef.'),
        );
      }
    }
  }
}


/**
 * Implements hook_field_is_empty().
 *
 * hook_field_is_emtpy() is where Drupal asks us if this field is empty.
 * Return TRUE if it does not contain data, FALSE if it does. This lets
 * the form API flag an error when required fields are empty.
 */
function mc_custom_color_field_field_is_empty($item, $field) {
  return empty($item['rgb']);
}

/**
 * Implements hook_field_formatter_info().
 *
 * We need to tell Drupal that we have two different types of formatters
 * for this field. One will change the text color, and the other will
 * change the background color.
 *
 * @see mc_custom_color_field_formatter_view()
 */
function mc_custom_color_field_field_formatter_info() {
  return array(
    // This formatter changes the background color of the content region.
    'cck_colorpicker_default_formatter' => array(
      'label' => t('Change the background of the output text'),
      'field types' => array('mc_custom_color_field_rgb'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 *
 * Two formatters are implemented.
 * - field_example_simple_text just outputs markup indicating the color that
 *   was entered and uses an inline style to set the text color to that value.
 * - field_example_color_background does the same but also changes the
 *   background color of div.region-content.
 *
 * @see mc_custom_color_field_formatter_info()
 */
function mc_custom_color_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {

    // This formatter adds css to the page changing the '.region-content' area's
    // background color. If there are many fields, the last one will win.
    case 'cck_colorpicker_default_formatter':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#type' => 'html_tag',
          '#tag' => 'p',
          '#value' => t('The content area color has been changed to @code', array('@code' => $item['rgb'])),
          '#attached' => array(
            'css' => array(
              array(
                'data' => 'div.region-content { background-color:' . $item['rgb'] . ';}',
                'type' => 'inline',
              ),
            ),
          ),
        );
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_field_widget_info().
 *
 * Three widgets are provided.
 * - A simple text-only widget where the user enters the '#ffffff'.
 * - A 3-textfield widget that gathers the red, green, and blue values
 *   separately.
 * - A farbtastic colorpicker widget that chooses the value graphically.
 *
 * These widget types will eventually show up in hook_field_widget_form,
 * where we will have to flesh them out.
 *
 * @see mc_custom_color_field_widget_form()
 */
function mc_custom_color_field_field_widget_info() {
  return array(
    'cck_colorpicker_default_widget' => array(
      'label' => t('Color Picker'),
      'field types' => array('mc_custom_color_field_rgb'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 *
 * hook_widget_form() is where Drupal tells us to create form elements for
 * our field's widget.
 *
 * We provide one of three different forms, depending on the widget type of
 * the Form API item provided.
 *
 * The 'field_example_colorpicker' and 'field_example_text' are essentially
 * the same, but field_example_colorpicker adds a javascript colorpicker
 * helper.
 *
 * field_example_3text displays three text fields, one each for red, green,
 * and blue. However, the field type defines a single text column,
 * rgb, which needs an HTML color spec. Define an element validate
 * handler that converts our r, g, and b fields into a simulated single
 * 'rgb' form element.
 */

/*
 * 	// Build an array of all the settings to be used by the javascript function
	$settings = array('ids' => array($element['#id']), 'backgrounds' => array($background_url), 'backgroundColors' => array($default_color), $element['#id'] . '-defaultColor' => $default_color);
	
	// Attach the 3rd party CSS and JS files, and attach the module's JS files.
	$element['#attached'] = array
	(
		'css' => array
		(
			// Add the 3rd party CSS files required for the form elmeent
			$path . '/css/colorpicker.css',
		),
		'js' => array
		(
			// Add the 3rd party JS files required for the form element
			$path . '/js/colorpicker.js',
			// Add the module js files
			drupal_get_path('module', 'jquery_colorpicker') . '/js/jquery_colorpicker.js',
			// Add the settings
			array
			(
				'data' => $settings,
				'type' => 'setting',
			),
		),
	);*/

function mc_custom_color_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $value = isset($items[$delta]['rgb']) ? $items[$delta]['rgb'] : '#DDDDDD';

  $widget = $element;
  $widget['#delta'] = $delta;
  
  $id = 'edit-' . str_replace("_", "-", $field['field_name']) . '-' . $langcode . '-' . $delta . '-rgb';
  $settings['id'] = $id;
  $settings['value'] = $value;
  
  switch ($instance['widget']['type']) {

	case 'cck_colorpicker_default_widget':
	  
      $widget += array(
        '#suffix' => '<div class="mc-custom-color-picker">1</div>',
        '#attached' => array(
          'js' => array(
            drupal_get_path('module', 'mc_custom_color_field') . '/colorpicker.js',
            drupal_get_path('module', 'mc_custom_color_field') . '/colorpicker.jquery.js',
            array(
              'data' => array('mc_custom_color_field' => $settings),
  			  'type' => 'setting',			
			),
          ),
          'css' => array(drupal_get_path('module', 'mc_custom_color_field') . '/colorpicker.css'),
        )
      );

      $widget += array(
        '#attributes' => array('class' => array('hide')),
        '#type' => 'textfield',
        '#default_value' => $value,
        '#size' => 7,
        '#maxlength' => 7,
      );
      break;

  }

  $element['rgb'] = $widget;
  return $element;
}


/**
 * Implements hook_field_widget_error().
 *
 * hook_field_widget_error() lets us figure out what to do with errors
 * we might have generated in hook_field_validate(). Generally, we'll just
 * call form_error().
 *
 * @see mc_custom_color_field_validate()
 * @see form_error()
 */
function mc_custom_color_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'field_example_invalid':
      form_error($element, $error['message']);
      break;
  }
}
