<?php

/**
 * @file
 * Defines the Reminder field with widget and formatter used to add a reminder.
 */

/**
 * Implements hook_field_info().
 */
function cck_user_notification_field_info() {
  return array (
    'cck_user_notification' => array (
      'label' => t('User Notification'),
      'description' => t('This field stores user_notification.'),
      'default_widget' => 'cck_user_notification_widget',
      'default_formatter' => 'cck_user_notification_formatter',
    ),
  );
}

/**
 * Implements hook_field_validate().
 */
function cck_user_notification_field_validate($entity_type, $entity, $field, $instance, $langcode, &$items, &$errors) {
  foreach ($items as $delta => &$item) {
  }
}

/**
 * Implements of hook_field_is_empty().
 */
function cck_user_notification_field_is_empty($item, $field) {
  return empty($item['user']);
}

/**
 * Implements hook_field_formatter_info().
 */
function cck_user_notification_field_formatter_info() {
  return array(
    'cck_user_notification_formatter' => array(
      'label' => t('Default'),
      'field types' => array('cck_user_notification'),
      'settings' => array(
        'calculation' => FALSE,
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function cck_user_notification_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  
  $element = array();
  
  $units = array('60' => t('Min'), '3600' => t('Hour'), '86400' => t('Day'), '604800' => t('Week'));
  
  $medias = array('sms'=>'SMS', 'mail'=>'Mail', 'fixedline'=>'Fixed Line', 'mobile'=>'Mobile');
  
  // Loop through each price value in this field.
  foreach ($items as $delta => $item) {

    // Theme the display of the price based on the display type.
    switch ($display['type']) {

      case 'cck_user_notification_formatter':

        $element[$delta] = array(
          '#markup' => $item['number'] . '' . $unit[$item['unit']] . '' . $medias[$item['media']],
        );
        
        break;
    }
  }

  return $element;
}

/**
 * Implements hook_field_widget_info().
 */
function cck_user_notification_field_widget_info() {
  return array(
    'cck_user_notification_widget' => array(
      'label' => t('User Notification'),
      'field types' => array('cck_user_notification'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function cck_user_notification_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  // Domain
  $domain = domain_get_domain();
  
  $widget = $element;
  $widget['#delta'] = $delta;
  $widget += array(
    '#attached' => array(
      'css' => array(drupal_get_path('module', 'cck_user_notification') . '/theme/cck_user_notification.theme.css'),
    ),
  );
  
  // Build the form based on the type of price widget.
  switch ($instance['widget']['type']) {

    // The full widget is a textfield with a currency select list.
    case 'cck_user_notification_widget':
      
  	  $lists = db_query("SELECT users.uid AS uid, users.name AS users_name FROM {users} LEFT JOIN {domain_editor} domain_editor ON users.uid = domain_editor.uid WHERE domain_editor.domain_id = :did",array(':did' => $domain['domain_id']))->fetchAllKeyed();
  	  $options[''] = t('Select');
  	  $options += array_filter($lists, 'check_plain');

      $widget['user'] = array(
        '#type' => 'select',
        '#title' => t('Selected'),
    	'#options' => $options,
        '#default_value' => $items[$delta]['user'],
      );

      $widget['requested_notification'] = array(
  	    '#type' => 'checkbox',
  	    '#title' => t('Receive online request'),
        '#default_value' => $items[$delta]['daily_notification'],
      );
      
      $widget['daily_notification'] = array(
  	    '#type' => 'checkbox',
  	    '#title' => t('Receive daily notification'),
        '#default_value' => $items[$delta]['daily_notification'],
      );
      
    break;
  }

  return $widget;
}

/**
 * Validate callback: ensures the amount value is numeric and converts it from a
 * decimal value to an integer price amount.
 */
function cck_user_notification_field_widget_validate($element, &$form_state) {
  if ($element['number']['#value'] !== '') {
    // Ensure the price is numeric.
    if (!is_numeric($element['number']['#value'])) {
      form_error($element['number'], t('%title: you must enter a numeric value for the number.', array('%title' => $element['number']['#title'])));
    }
    else {
      // Convert the decimal amount value entered to an integer based amount value.
      form_set_value($element['number'], (int) $element['number']['#value'], $form_state);
    }
  }
}

/**
 * Implements hook_field_widget_error().
 */
function cck_user_notification_field_widget_error($element, $error, $form, &$form_state) {
  form_error($element['number'], $error['message']);
}
