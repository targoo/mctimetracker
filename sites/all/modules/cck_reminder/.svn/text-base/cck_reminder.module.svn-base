<?php

/**
 * @file
 * Defines the Reminder field with widget and formatter used to add a reminder.
 */

/**
 * Implements hook_field_info().
 */
function cck_reminder_field_info() {
  return array(
    'cck_reminder_reminder' => array(
      'label' => t('Reminder'),
      'description' => t('This field stores reminder.'),
      'default_widget' => 'cck_reminder_reminder_widget',
      'default_formatter' => 'cck_reminder_reminder_formatter',
    ),
  );
}

/**
 * Implements hook_field_validate().
 */
function cck_reminder_field_validate($entity_type, $entity, $field, $instance, $langcode, &$items, &$errors) {
  // Ensure only numeric values are entered in price fields.
  foreach ($items as $delta => &$item) {
    /*if ($item['number'] == '') {
      $error = t('Invalid Reminder');
      form_set_error($field['field_name'], $error);
    }*/
  }
}

/**
 * Implements of hook_field_is_empty().
 */
function cck_reminder_field_is_empty($item, $field) {
  return empty($item['number']);
}

/**
 * Implements hook_field_formatter_info().
 */
function cck_reminder_field_formatter_info() {
  return array(
    'cck_reminder_formatted_components' => array(
      'label' => t('Default'),
      'field types' => array('cck_reminder'),
      'settings' => array(
        'calculation' => FALSE,
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function cck_reminder_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $units = array('60' => t('Min'), '3600' => t('Hour'), '86400' => t('Day'), '604800' => t('Week'));
  $medias = array('sms'=>'SMS', 'mail'=>'Mail', 'fixedline'=>'Fixed Line', 'mobile'=>'Mobile');
  
  // Loop through each price value in this field.
  foreach ($items as $delta => $item) {

    // Theme the display of the price based on the display type.
    switch ($display['type']) {

      case 'cck_reminder_formatted_components':

        $element[$delta] = array(
          '#markup' => $item['number'] . '' . $unit[$item['unit']] . '' . $medias[$item['media']],
        );
        
        break;
    }
  }

  return $element;
}

/**
 * Implements hook_field_widget_info().
 */
function cck_reminder_field_widget_info() {
  return array(
    'cck_reminder_reminder_widget' => array(
      'label' => t('Reminder'),
      'field types' => array('cck_reminder_reminder'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function cck_reminder_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  $widget = $element;
  $widget['#delta'] = $delta;
  
  $widget += array(
    '#attached' => array(
      'css' => array(drupal_get_path('module', 'cck_reminder') . '/theme/cck_reminder.theme.css'),
    ),
  );
  
  // Build the form based on the type of price widget.
  switch ($instance['widget']['type']) {

    // The full widget is a textfield with a currency select list.
    case 'cck_reminder_reminder_widget':
      
      $widget['number'] = array(
        '#type' => 'textfield',
        '#size' => 2,
        '#default_value' => isset($items[$delta]['number']) ? $items[$delta]['number'] : '',
        '#prefix' => '<div class="reminder-full">',
      );

      $options = array('60' => t('Min'), '3600' => t('Hour'), '86400' => t('Day'), '604800' => t('Week'));
      $widget['unit'] = array(
        '#type' => 'select',
        '#options' => $options,
        '#default_value' => isset($items[$delta]['unit']) ? $items[$delta]['unit'] : 86400,
      );
      
      $options = array('sms'=>'SMS', 'mail'=>'Mail', 'fixedline'=>'Fixed Line', 'mobile'=>'Mobile');
      $options = array('sms'=>'SMS', 'mail'=>'Mail', 'fixedline'=>'Fixed Line');
      $widget['media'] = array(
        '#title' => $element['#title'],
        '#type' => 'select',
        '#options' => $options,
        '#default_value' => isset($items[$delta]['media']) ? $items[$delta]['media'] : 'mail',
        '#suffix' => '</div>',
      );
      
      // add our js
      //drupal_add_js(drupal_get_path('module','cck_reminder').'/unlimitedfield_remove.js');
      
      /*$widget['remove'] = array(
        '#name' => $field['field_name'].'_'.$delta.'_remove_button',
        '#type' => 'markup',
        '#value' => t('Remove'),
        '#validate' => array(),
        '#markup' => '<div class="unlimitedfield_remove_button">Remove</div>',
        '#weight' => -99,
      );*/
      
    break;
  }

  //$element['#element_validate'][] = 'cck_reminder_field_widget_validate';

  return $widget;
}

/**
 * Validate callback: ensures the amount value is numeric and converts it from a
 * decimal value to an integer price amount.
 */
function cck_reminder_field_widget_validate($element, &$form_state) {
  if ($element['number']['#value'] !== '') {
    // Ensure the price is numeric.
    if (!is_numeric($element['number']['#value'])) {
      form_error($element['number'], t('%title: you must enter a numeric value for the number.', array('%title' => $element['number']['#title'])));
    }
    else {
      // Convert the decimal amount value entered to an integer based amount value.
      form_set_value($element['number'], (int) $element['number']['#value'], $form_state);
    }
  }
}

/**
 * Implements hook_field_widget_error().
 */
function cck_reminder_field_widget_error($element, $error, $form, &$form_state) {
  form_error($element['number'], $error['message']);
}
