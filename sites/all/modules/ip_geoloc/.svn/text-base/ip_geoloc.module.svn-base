<?php

/**
 * @file
 *
 * Using one or more of a number of optional sources IP Geolocation retrieves
 * and stores geographical and postal address information of your site visitors,
 * based on their IP addresses.
 * It stores this information in a form suitable for further processing,
 * reporting, exporting and display via the Views module.
 * Ready-to-uses views, blocks and maps are provided. For programmers there is
 * also an API.
 */
define('IP_GEOLOC_LOCATION_CHECK_INTERVAL', 60);
define('IP_GEOLOC_CALLBACK_TIMEOUT', 60);

require_once 'ip_geoloc_api.inc';
require_once 'ip_geoloc_blocks.inc';

/**
 * Implements hook-help().
 */
function ip_geoloc_help($path, $arg) {
  if ($path == 'admin/help#ip_geoloc') {
    return t('Detailed information is on the <a href="!ip_geoloc">IP Geolocation project page</a> and in the <a href="!README">README</a> file',
        array('!ip_geoloc' => url('http://drupal.org/project/ip_geoloc'), '!README' => url(drupal_get_path('module', 'ip_geoloc') . '/README.txt')));
  }
}

/**
 * Implements hook_menu().
 *
 * Defines new menu items.
 */
function ip_geoloc_menu() {
  $items = array();
  // Put the administrative settings under System on the Configuration page.
  $items['admin/config/system/ip_geoloc'] = array(
    'title' => 'IP Geolocation',
    'description' => 'Configure how geolocation information is updated.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ip_geoloc_admin_configure'),
    'access arguments' => array('administer site configuration'),
    'file' => 'ip_geoloc.admin.inc'
  );
  $items['ip-geoloc-current-location'] = array(
    'title' => 'Current location recipient',
    'page callback' => 'ip_geoloc_current_location_ajax_recipient',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_init().
 *
 * Due to the weight set in ip_geoloc.install this hook is called after all
 * other hook_init() implementations have completed.
 * hook_inits are called as the last step in _drupal_bootstrap_full(), file
 * includes/common.inc
 * Note that the {accesslog} is updated in statistics_exit(), i.e. after the
 * page is loaded. This means that a second click may be required to before the
 * current position marker appears on the recent visitor map.
 */
function ip_geoloc_init() {

  if (!isset($_SESSION['ip_geoloc'])) { // new session
    $_SESSION['ip_geoloc'] = array('location' => array());
  }
  $location = &$_SESSION['ip_geoloc']['location'];

  $reverse_geocode_client_timeout = ip_geoloc_reverse_geocode_timeout();

  // Sample location when due or as soon as a reverse_geocode timeout is detected.
  if (ip_geoloc_check_location() || $reverse_geocode_client_timeout) {
    // Avoid mixing of previous and new location data by erasing location.
    $_SESSION['ip_geoloc']['location'] = array();

    $use_google_to_reverse_geocode = variable_get('ip_geoloc_google_to_reverse_geocode', TRUE);

    // Handle first click of the session (ie $_SESSION['ip_geoloc']['last_position_check'] not set)
    // as well as client timeout fallback, using Smart IP, GeoIP API and
    // server-side version of Google Maps reverse-geocode service.
    if (!$use_google_to_reverse_geocode || $reverse_geocode_client_timeout || !isset($_SESSION['ip_geoloc']['last_position_check'])) {
      // 3 calls below are synchronous, $location filled immediately on return.
      if (ip_geoloc_use_smart_ip_if_enabled($location) || ip_geoloc_use_geoip_api_if_enabled($location)) {
        if ($use_google_to_reverse_geocode && isset($location['latitude']) && isset($location['longitude'])) {
          // (Re)initialise street address details. These are based on the IP,
          // so reflect the provider location, not the browser location.
          if ($google_address = ip_geoloc_reverse_geocode($location['latitude'], $location['longitude'])) {
            // $location = array('ip_address' => $ip_address);
            ip_geoloc_flatten_google_address($google_address, $location);
          }
        }
        if ($reverse_geocode_client_timeout) {
          watchdog('IP Geolocation', 'Location timeout (waited %seconds seconds). Fallback: %address.',
            array('%seconds' => $reverse_geocode_client_timeout, '%address' => isset($location['formatted_address']) ? $location['formatted_address'] : ''), WATCHDOG_NOTICE);
        }
      }
      else {
        ip_geoloc_debug(t('Smart IP and GeoIP API fallbacks NOT enabled.'));
      }
      unset($_SESSION['ip_geoloc']['position_pending_since']);
    }

    if ($use_google_to_reverse_geocode) {
      // Insert some javascript to first retrieve the user's lat/long coords and
      // then use Google Maps API to reverse-geocode these coords into a street
      // address. This is all done via client-side calls, so the Drupal server
      // will not rake up any calls against its Google-imposed quotum, ie the
      // OVER_QUERY_LIMIT.
      // When done the javascript calls us back on the supplied menu callback,
      // '/ip-geoloc-current-location', which receives the geolocation data
      // from the Google Maps call via the $_POST variable and stores it in
      // $_SESSION['ip_geoloc'].
      // Naturally all of this will only work if the browser has javascript
      // enabled.
      ip_geoloc_debug(t('IP Geolocation: initiating services to locate current position and reverse-geocode address...'));
      ip_geoloc_get_current_location('ip-geoloc-current-location');
      $_SESSION['ip_geoloc']['position_pending_since'] = time();
    }

    $_SESSION['ip_geoloc']['last_position_check'] = time();
  };

  // ip_geoloc_store_location() does nothing, if supplied IP address is empty.
  if (ip_geoloc_store_location($location) !== FALSE) {
    $location['ip_address'] = NULL; // if successfully stored, don't store again
  }
}

/**
 * Data recipient for javascript function getLocation() (file:
 * ip_geoloc_current_location.js) via menu callback /ip-geoloc-current-location,
 * see function ip_geoloc_menu() above.
 * Receives latitude, longitude, accuracy and address via the global $_POST
 * variable from function getLocations(), which posts these through an AJAX
 * call.
 * @see ip_geoloc_current_location.js
 */
function ip_geoloc_current_location_ajax_recipient() {

  $location = &$_SESSION['ip_geoloc']['location'];
  // Erase location data previously collected
  $location = array('ip_address' => ip_address());

  if (isset($_POST['error'])) {
    // Device/browser does not support getCurrentPosition(), timeout, or Google reverse-geocode error.
    $error = check_plain($_POST['error']) . ' -- ';
    if (ip_geoloc_use_smart_ip_if_enabled($location) || ip_geoloc_use_geoip_api_if_enabled($location)) {
      // (Re)initialise street address details. These are based on the IP,
      // so reflect the internet provider location, not the browser location.
      if ($google_address = ip_geoloc_reverse_geocode($location['latitude'], $location['longitude'])) {
        // $location = array('ip_address' => $ip_address);
        ip_geoloc_flatten_google_address($google_address, $location);
      }
      $error .= t('Fallback: %address', array('%address' => $location['formatted_address']));
    }
    else {
      $error .= t('Smart IP and GeoIP API fallbacks NOT enabled.');
    }
    watchdog('IP Geolocation', $error, NULL, WATCHDOG_NOTICE);
    ip_geoloc_debug('IP Geolocation, ' . $location['ip_address'] . ': ' . $error);
  }
  else {
    foreach ($_POST as $key => $value) {
      $location[check_plain($key)] = check_plain($value);
    }
    $time_elapsed = isset($_SESSION['ip_geoloc']['position_pending_since'])
      ? time() - $_SESSION['ip_geoloc']['position_pending_since'] : t('many, many');
    watchdog('IP Geolocation', 'Location %address, received after %seconds seconds.',  array('%address' => $location['formatted_address'], '%seconds' => $time_elapsed), WATCHDOG_INFO);
    ip_geoloc_debug(t('IP Geolocaton: Google reverse-geocoding callback received after %seconds seconds: !location',
      array('%seconds' => $time_elapsed, '!location' => ip_geoloc_pretty_print($location))));
  }
  unset($_SESSION['ip_geoloc']['position_pending_since']);

  if (ip_geoloc_store_location($location) !== FALSE) {
    $location['ip_address'] = NULL; // if successfully stored, don't store again
  }
}

/**
 * Use Smart IP (if enabled) to retrieve lat/long and address info.
 * Note that smart_ip_get_location() will invoke
 * hook_smart_ip_get_location_alter($location), which we use to format the
 * address.
 * @param $location, if $location['ip_address'] isn't filled out the current
 *   user's IP address will be used
 */
function ip_geoloc_use_smart_ip_if_enabled(&$location) {
  if (variable_get('ip_geoloc_smart_ip_as_backup', TRUE)) {
    if (module_exists('smart_ip')) {
      if (empty($location['ip_address'])) {
        $location['ip_address'] = ip_address();
      }
      $location = smart_ip_get_location($location['ip_address']); //see also: ip_geoloc_smart_ip_get_location_alter()
      return TRUE;
    }
    ip_geoloc_debug(t('IP Geolocation: Smart IP configured as a backup, but is not enabled.'));
  }
//$location['formatted_address'] = '';
  return FALSE;
}

/**
 * Module GeoIP API does not expose a hook, but it does expose an API.
 */
function ip_geoloc_use_geoip_api_if_enabled(&$location) {
  if (!module_exists('geoip')) {
    return FALSE;
  }
  if (empty($location['ip_address'])) {
    $location['ip_address'] = ip_address();
  }
  $geoip_location = (array) geoip_city($location['ip_address']);
  if (!empty($geoip_location)) {
    // Where different convert GeoIP names to our equivalents
    $geoip_location['country'] = isset($geoip_location['country_name']) ? $geoip_location['country_name'] : '';
    unset($geoip_location['country_name']);
    $location = array_merge($geoip_location, $location);
    ip_geoloc_format_address($location);
  }
  ip_geoloc_debug(t('IP Geolocation: GeoIP API retrieved: !location', array('!location' => ip_geoloc_pretty_print($location))));
  return TRUE;
}

/**
 * Return whether a the visitor's location is due for an update, i.e. whether
 * more than a configurable number of seconds have elapsed.
 */
function ip_geoloc_check_location() {
  $interval = variable_get('ip_geoloc_location_check_interval', IP_GEOLOC_LOCATION_CHECK_INTERVAL);
  if ($interval == 0) {
    return FALSE;
  }
  if (isset($_SESSION['ip_geoloc']['last_position_check'])) {
    $time_elapsed = time() - $_SESSION['ip_geoloc']['last_position_check'];
    if ($time_elapsed < $interval) {
      ip_geoloc_debug(t('IP Geolocation: next update in %seconds seconds.', array('%seconds' => $interval - $time_elapsed)));
      return FALSE;
    }
  }
  return TRUE;
}

/**
 * Handle timeout of the Google Maps reverse-geocode callback, if enabled.
 * Based on $_SESSION['ip_geoloc']['position_pending_since'] being set to the
 * current time when the service was initiated.
 */
function ip_geoloc_reverse_geocode_timeout() {
  if (isset($_SESSION['ip_geoloc']['position_pending_since'])) {
    $time_elapsed = time() - $_SESSION['ip_geoloc']['position_pending_since'];
    ip_geoloc_debug(t('IP Geolocation: location info now pending for %seconds seconds.', array('%seconds' => $time_elapsed)));
    if ($time_elapsed > IP_GEOLOC_CALLBACK_TIMEOUT) {
      return $time_elapsed;
    }
  }
  return FALSE;
}

/**
 * This is a poorman's version as it doesn't take local format conventions into
 * account. Luckily this is only called as a fallback when lat/long could not
 * be established or the Google reverse-geocode function returned an error.
 * @param $location
 */
function ip_geoloc_format_address(&$location) {
  $location['formatted_address'] = isset($location['city']) ? $location['city'] : '';
  if (!empty($location['region'])) {
    $location['formatted_address'] .= ' ' . $location['region'];
  }
  if (!empty($location['postal_code']) && $location['postal_code'] != '-') {
    $location['formatted_address'] .= ' ' . $location['postal_code'] . ',';
  }
  $location['formatted_address'] .= ' ' . $location['country'];
  $location['formatted_address'] = trim($location['formatted_address']);
}

/**
 * Fleshes out the $ip_geoloc_address array based on the additional data
 * provided in the $google_address array. This may involve tweaking of the
 * 'latitude' and 'longitude' entries so that they remain consistent with the
 * street address components.
 *
 * @param $google_address
 * @param $ip_geoloc_address
 * @return TRUE, unless $google_address or $ip_geoloc_address are empty
 */
function ip_geoloc_flatten_google_address($google_address, &$ip_geoloc_address) {
  if (is_array($google_address) && is_array($google_address['address_components']) && is_array($ip_geoloc_address)) {
    foreach ($google_address['address_components'] as $component) {
      $long_name = $component['long_name'];
      if (!empty($long_name)) {
        $type = $component['types'][0];
        $ip_geoloc_address[$type] = $long_name;
        if ($type == 'country' && !empty($component['short_name'])) {
          $ip_geoloc_address['country_code'] = $component['short_name'];
        }
      }
    }
    $ip_geoloc_address['formatted_address'] = $google_address['formatted_address'];
    // The following may be slightly different from the original lat,long passed
    // into ip_geoloc_reverse_geocode().
    $ip_geoloc_address['latitude']  = $google_address['geometry']['location']['lat'];
    $ip_geoloc_address['longitude'] = $google_address['geometry']['location']['lng'];
    return TRUE;
  }
  return FALSE;
}

function ip_geoloc_pretty_print($location) {
  $t = '';
  foreach ($location as $label => $value) {
    if (!empty($value)) {
      $t .= check_plain($label) . ":&nbsp;<strong>" . check_plain($value) . "</strong>&nbsp; ";
    }
  }
  return empty($t) ? t('nothing') : $t;
}

function ip_geoloc_debug($message, $type = 'status') {
  if ($GLOBALS['user']->uid == 1 && variable_get('ip_geoloc_debug', FAlSE)) {
    drupal_set_message($message, $type);
  }
}

/**
 * Implements hook_views_api().
 */
function ip_geoloc_views_api() {
  return array(
    'api' => views_api_version(),
    'path' => drupal_get_path('module', 'ip_geoloc') . '/views'
  );
}

/**
 * Implements hook_smart_ip_get_location_alter().
 *
 * Called from the bottom of smart_ip_get_location() when it has fleshed out
 * the $location array as much as it can. Used here to format the address.
 */
function ip_geoloc_smart_ip_get_location_alter(&$location) {
  if (empty($location['postal_code'])) {
    $location['postal_code'] = $location['zip'];
  }
  ip_geoloc_format_address($location);
  ip_geoloc_debug(t('IP Geolocation: Smart IP retrieved: !location', array('!location' => ip_geoloc_pretty_print($location))));
}

/**
 * Implements hook_device_geolocation_detector_ajax_alter().
 *
 * This is called from device_geolocation_detector_ajax(), the AJAX callback
 * that receives in the $_POST array the address data from Google geocoding.
 * @obsolete
 */
function ip_geoloc_device_geolocation_detector_ajax_alter(&$location) {
  ip_geoloc_debug(t('IP Geolocation: Device Geolocation retrieved: !location', array('!location' => ip_geoloc_pretty_print($location))));
}
